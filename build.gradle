// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.jacocoVersion = '0.8.7'
    ext.versions = [
            'kotlin'        : '1.7.22',
            'coroutines'    : '1.4.2',
            'pusher'        : '2.2.1',
            'robolectric'   : '4.9.2',
            'mockito'       : '3.8.0',
            'mockito_kotlin': '2.2.0',
            'junit_ext'     : '1.1.2',
    ]

    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
plugins {
    id "org.sonarqube" version "3.5.0.2730"
}

sonarqube {
    properties {
        property "sonar.projectKey", "PaystackHQ_paystack-android"
        property "sonar.organization", "paystackhq"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/paystack/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property("sonar.sources", "src/main")
        property("sonar.tests", "src/test")
    }
}


allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            force 'org.objenesis:objenesis:2.6'
            eachDependency { details ->
                if (details.requested.group == 'org.jacoco') {
                    details.useVersion jacocoVersion
                }
            }
        }
    }
}

ext {
    compileSdkVersion = 29
    minSdkVersion = 16
    targetSdkVersion = 29
    versionCode = 23

    buildToolsVersion = "29.0.2"
    versionName = "3.3.2"
}

Object getEnvOrDefault(String propertyName, Object defaultValue) {
    // Check 'local.properties' first
    String propertyValue

    def propFile = file('local.properties')
    if (propFile.exists()) {
        Properties localProps = new Properties()
        localProps.load(propFile.newDataInputStream())
        propertyValue = localProps.getProperty(propertyName)
        if (propertyValue != null) {
            return propertyValue
        }
    }

    propertyValue = project.properties[propertyName]

    if (propertyValue == null) {
        logger.error("Build property named {} not defined. Falling back to default value.", propertyName)
        return defaultValue
    }

    return propertyValue
}
